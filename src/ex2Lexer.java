/* The following code was generated by JFlex 1.6.1 */

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>ex2Lexer.flex</tt>
 */
class ex2Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int MACRO = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\0\1\47"+
    "\1\7\1\0\1\15\2\0\1\43\1\44\1\11\1\12\1\51\1\14"+
    "\1\0\1\10\1\4\11\5\1\0\1\13\1\16\1\20\1\17\2\0"+
    "\3\6\1\24\1\27\1\21\1\41\1\34\1\26\2\6\1\30\1\42"+
    "\1\37\1\22\2\6\1\23\1\32\1\35\1\36\1\6\1\33\1\40"+
    "\2\6\1\0\1\50\2\0\1\6\1\0\3\6\1\24\1\27\1\21"+
    "\1\41\1\34\1\26\2\6\1\30\1\42\1\37\1\22\2\6\1\23"+
    "\1\32\1\35\1\36\1\6\1\33\1\40\2\6\1\45\1\0\1\46"+
    "\262\0\2\25\115\0\1\31\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ufe90\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\2\3\1\4\1\2\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\3\4"+
    "\1\1\2\4\1\1\3\4\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\2\25\1\1\1\26\1\27\1\30"+
    "\1\0\1\31\1\32\1\33\1\34\1\35\2\4\1\36"+
    "\1\37\1\0\1\37\3\4\1\0\2\4\1\0\1\4"+
    "\1\40\1\41\1\42\1\43\2\0\1\44\1\4\2\45"+
    "\1\0\2\4\1\0\1\4\1\0\1\4\2\46\1\47"+
    "\1\0\1\4\2\50\1\4\1\0\1\4\1\0\3\4"+
    "\1\0\1\4\2\51\1\52\1\53\2\54";

  private static int [] zzUnpackAction() {
    int [] result = new int[101];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\176\0\250\0\176\0\176\0\322"+
    "\0\374\0\u0126\0\u0150\0\176\0\176\0\176\0\176\0\176"+
    "\0\u017a\0\u01a4\0\u01ce\0\u01f8\0\u0222\0\u024c\0\u0276\0\u02a0"+
    "\0\u02ca\0\u02f4\0\u031e\0\u0348\0\u0372\0\176\0\176\0\176"+
    "\0\176\0\u039c\0\176\0\u03c6\0\176\0\u03f0\0\u041a\0\176"+
    "\0\176\0\176\0\u0444\0\176\0\176\0\176\0\176\0\176"+
    "\0\u046e\0\u0498\0\374\0\176\0\u04c2\0\374\0\u04ec\0\u0516"+
    "\0\u0540\0\u056a\0\u0594\0\u05be\0\u05e8\0\u0612\0\176\0\176"+
    "\0\176\0\176\0\u063c\0\u0666\0\374\0\u0690\0\176\0\374"+
    "\0\u06ba\0\u06e4\0\u070e\0\u0738\0\u0762\0\u078c\0\u07b6\0\176"+
    "\0\374\0\176\0\u07e0\0\u080a\0\176\0\374\0\u0834\0\u085e"+
    "\0\u0888\0\u08b2\0\u08dc\0\u0906\0\u0930\0\u095a\0\u0984\0\176"+
    "\0\374\0\374\0\374\0\176\0\374";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[101];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\11\1\25\1\26\1\27\1\30\1\31\1\11"+
    "\1\32\1\33\1\34\6\11\1\35\1\36\1\37\1\40"+
    "\1\41\3\4\1\42\2\4\44\42\1\43\1\44\1\42"+
    "\4\4\1\45\1\46\34\4\1\47\1\50\1\51\4\4"+
    "\1\52\54\0\1\6\53\0\2\10\50\0\3\11\12\0"+
    "\4\11\1\0\3\11\1\0\11\11\7\0\1\12\1\5"+
    "\1\6\47\12\10\0\1\12\1\53\56\0\1\54\1\0"+
    "\1\55\50\0\1\56\1\57\51\0\1\60\35\0\3\11"+
    "\12\0\1\11\1\61\2\11\1\0\3\11\1\0\11\11"+
    "\13\0\3\11\12\0\4\11\1\0\1\11\1\62\1\11"+
    "\1\0\11\11\13\0\3\11\12\0\1\11\1\63\2\11"+
    "\1\0\3\11\1\0\11\11\30\0\1\64\15\0\1\65"+
    "\16\0\3\11\12\0\1\66\3\11\1\0\3\11\1\0"+
    "\5\11\1\67\3\11\13\0\3\11\12\0\4\11\1\0"+
    "\2\11\1\70\1\0\6\11\1\71\2\11\44\0\1\72"+
    "\20\0\3\11\12\0\4\11\1\0\3\11\1\0\3\11"+
    "\1\73\5\11\13\0\3\11\12\0\4\11\1\0\3\11"+
    "\1\0\2\11\1\74\6\11\13\0\3\11\12\0\4\11"+
    "\1\75\1\76\2\11\1\0\11\11\7\0\1\42\2\0"+
    "\44\42\2\0\1\42\23\0\1\77\11\0\1\100\1\0"+
    "\1\101\7\0\1\102\6\0\2\46\71\0\2\103\23\0"+
    "\11\104\1\0\40\104\4\0\3\11\12\0\2\11\1\105"+
    "\1\11\1\0\3\11\1\0\11\11\13\0\3\11\12\0"+
    "\4\11\1\0\3\11\1\0\3\11\1\106\5\11\44\0"+
    "\1\107\20\0\3\11\12\0\4\11\1\0\3\11\1\0"+
    "\3\11\1\110\5\11\13\0\3\11\12\0\4\11\1\0"+
    "\3\11\1\111\1\112\10\11\13\0\3\11\12\0\4\11"+
    "\1\0\3\11\1\0\3\11\1\113\5\11\32\0\1\114"+
    "\32\0\3\11\12\0\2\11\1\115\1\11\1\0\3\11"+
    "\1\0\11\11\13\0\3\11\12\0\4\11\1\116\1\117"+
    "\2\11\1\0\11\11\46\0\1\120\16\0\3\11\12\0"+
    "\4\11\1\0\3\11\1\0\5\11\1\121\3\11\46\0"+
    "\1\122\12\0\11\104\1\123\40\104\4\0\3\11\12\0"+
    "\4\11\1\0\3\11\1\0\4\11\1\124\4\11\36\0"+
    "\1\125\26\0\3\11\12\0\4\11\1\0\1\11\1\126"+
    "\1\11\1\0\11\11\13\0\3\11\12\0\4\11\1\0"+
    "\1\11\1\127\1\11\1\0\11\11\34\0\2\130\27\0"+
    "\3\11\12\0\4\11\1\130\1\131\2\11\1\0\11\11"+
    "\37\0\1\132\25\0\3\11\12\0\4\11\1\0\2\11"+
    "\1\133\1\0\11\11\7\0\10\104\1\6\1\123\40\104"+
    "\4\0\3\11\12\0\2\11\1\134\1\11\1\0\3\11"+
    "\1\0\11\11\13\0\3\11\12\0\2\11\1\135\1\11"+
    "\1\0\3\11\1\0\11\11\46\0\1\136\16\0\3\11"+
    "\12\0\4\11\1\0\3\11\1\0\5\11\1\137\3\11"+
    "\36\0\1\140\26\0\3\11\12\0\4\11\1\0\1\11"+
    "\1\141\1\11\1\0\11\11\13\0\3\11\12\0\4\11"+
    "\1\0\3\11\1\0\5\11\1\142\3\11\13\0\3\11"+
    "\12\0\4\11\1\0\3\11\1\0\5\11\1\143\3\11"+
    "\50\0\1\144\14\0\3\11\12\0\4\11\1\0\3\11"+
    "\1\0\7\11\1\145\1\11\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2478];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\2\11\4\1\5\11\15\1\4\11"+
    "\1\1\1\11\1\1\1\11\2\1\3\11\1\0\5\11"+
    "\3\1\1\11\1\0\4\1\1\0\2\1\1\0\1\1"+
    "\4\11\2\0\2\1\1\11\1\1\1\0\2\1\1\0"+
    "\1\1\1\0\1\1\1\11\1\1\1\11\1\0\1\1"+
    "\1\11\2\1\1\0\1\1\1\0\3\1\1\0\1\1"+
    "\1\11\3\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[101];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
      StringBuffer string = new StringBuffer();

     private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }

  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }

private StringBuilder X = new StringBuilder();
private StringBuilder Y = new StringBuilder();
private boolean EncounteredComma = false;




  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ex2Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 202) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.print(yytext());
            }
          case 45: break;
          case 2: 
            { /*ignore*/
            }
          case 46: break;
          case 3: 
            { System.out.print(yytext());
                          return symbol(sym.CONSTINT, new Integer(yytext()));
            }
          case 47: break;
          case 4: 
            { System.out.print(yytext());
                          return symbol(sym.IDENT, new Integer(1));
            }
          case 48: break;
          case 5: 
            { System.out.print(" / "); return symbol(sym.DIVIDE);
            }
          case 49: break;
          case 6: 
            { System.out.print(" * "); return symbol(sym.TIMES);
            }
          case 50: break;
          case 7: 
            { System.out.print(" + "); return symbol(sym.PLUS);
            }
          case 51: break;
          case 8: 
            { System.out.print(" ; "); return symbol(sym.SEMI);
            }
          case 52: break;
          case 9: 
            { System.out.print(" - "); return symbol(sym.MINUS);
            }
          case 53: break;
          case 10: 
            { System.out.print(" % "); return symbol(sym.MODULO);
            }
          case 54: break;
          case 11: 
            { System.out.print(" < "); return symbol(sym.LESS);
            }
          case 55: break;
          case 12: 
            { System.out.print(" > "); return symbol(sym.GREATER);
            }
          case 56: break;
          case 13: 
            { System.out.print(" = "); return symbol(sym.EQ);
            }
          case 57: break;
          case 14: 
            { System.out.print(" ( "); return symbol(sym.LPARENS);
            }
          case 58: break;
          case 15: 
            { System.out.print(" ) "); return symbol(sym.RPARENS);
            }
          case 59: break;
          case 16: 
            { System.out.print(" { "); return symbol(sym.LBRACE);
            }
          case 60: break;
          case 17: 
            { System.out.print(" } "); return symbol(sym.RBRACE);
            }
          case 61: break;
          case 18: 
            { string.append( yytext() );
            }
          case 62: break;
          case 19: 
            { yybegin(YYINITIAL);
                                       return symbol(sym.CONSTSTRING,
                                       string.toString());
            }
          case 63: break;
          case 20: 
            { string.append('\\');
            }
          case 64: break;
          case 21: 
            { if (EncounteredComma){
                                           Y.append(yytext());
                                        }
                                        else{
                                           X.append(yytext());
                                        }
            }
          case 65: break;
          case 22: 
            { 
            }
          case 66: break;
          case 23: 
            { Integer intX;
                                         Integer intY;
                                         intX = Integer.parseInt(X.toString());
                                         intY = Integer.parseInt(Y.toString());
                                         if (intX < intY){
                                            System.out.print(intX);
                                            return symbol(sym.CONSTINT,intY);}
                                         else{
                                            System.out.print(intY);
                                            return symbol(sym.CONSTINT,intX);}
            }
          case 67: break;
          case 24: 
            { EncounteredComma = true;
            }
          case 68: break;
          case 25: 
            { System.out.print(" << "); return symbol(sym.SHIFTLEFT);
            }
          case 69: break;
          case 26: 
            { System.out.print(" <= "); return symbol(sym.LESSEQ);
            }
          case 70: break;
          case 27: 
            { System.out.print(" >> "); return symbol(sym.SHIFTRIGHT);
            }
          case 71: break;
          case 28: 
            { System.out.print(" >= "); return symbol(sym.GREATEQ);
            }
          case 72: break;
          case 29: 
            { System.out.print(" == "); return symbol(sym.EQEQ);
            }
          case 73: break;
          case 30: 
            { System.out.print(" DO "); return symbol(sym.DO);
            }
          case 74: break;
          case 31: 
            { System.out.print(" IF "); return symbol(sym.IF);
            }
          case 75: break;
          case 32: 
            { string.append('\r');
            }
          case 76: break;
          case 33: 
            { string.append('\t');
            }
          case 77: break;
          case 34: 
            { string.append('\n');
            }
          case 78: break;
          case 35: 
            { string.append('\"');
            }
          case 79: break;
          case 36: 
            { System.out.print(" FOR "); return symbol(sym.FOR);
            }
          case 80: break;
          case 37: 
            { System.out.print(" INT "); return symbol(sym.CONSTINT);
            }
          case 81: break;
          case 38: 
            { string.setLength(0); yybegin(MACRO);
            }
          case 82: break;
          case 39: 
            { yybegin(YYINITIAL);
            }
          case 83: break;
          case 40: 
            { System.out.print(" ELSE "); return symbol(sym.ELSE);
            }
          case 84: break;
          case 41: 
            { System.out.print(" WHILE "); return symbol(sym.WHILE);
            }
          case 85: break;
          case 42: 
            { System.out.print(" RETURN "); return symbol(sym.RETURN);
            }
          case 86: break;
          case 43: 
            { System.out.print(" EXTERN "); return symbol(sym.EXTERN);
            }
          case 87: break;
          case 44: 
            { string.setLength(0); yybegin(STRING);
            }
          case 88: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java ex2Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        ex2Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new ex2Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
